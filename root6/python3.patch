diff --git a/build/unix/makepchinput.py b/build/unix/makepchinput.py
index 7d8e5bc..646b16f 100755
--- a/build/unix/makepchinput.py
+++ b/build/unix/makepchinput.py
@@ -12,12 +12,15 @@ import sys
 import os
 import glob
 import shutil
-from sets import Set
+try:
+    set
+except NameError:
+    from sets import Set as set
 
 #-------------------------------------------------------------------------------
 def removeFiles(filesList):
-   existingFilesList = filter(os.path.exists,filesList)
-   map(os.unlink, existingFilesList)
+   existingFilesList = list(filter(os.path.exists,filesList))
+   list(map(os.unlink, existingFilesList))
 
 #-------------------------------------------------------------------------------
 def removeLeftOvers():
@@ -45,9 +48,9 @@ def getParams():
    posDelim = argv.index('--')
    clingetpchList = argv[3:posDelim]
    cxxflags = argv[posDelim + 1:]
-   print (', '.join(cxxflags))
+   print((', '.join(cxxflags)))
    cxxflagsNoW = [flag for flag in cxxflags if (flag[0:2] != '-W' and flag[0:3] != '-wd') or flag[0:4] == '-Wno']
-   print (', '.join(cxxflagsNoW))
+   print((', '.join(cxxflagsNoW)))
 
    return rootSrcDir, modules, clingetpchList, cxxflagsNoW
 
@@ -189,7 +192,7 @@ def getDictNames(theDirName):
    for wildcard in wildcards:
       allDictNames += glob.glob(wildcard)
    stdDictpattern = os.path.join("core","metautils","src","G__std_")
-   dictNames = filter (lambda dictName: not ('G__Cling.cxx' in dictName or stdDictpattern in dictName),allDictNames )
+   dictNames = [dictName for dictName in allDictNames if not ('G__Cling.cxx' in dictName or stdDictpattern in dictName)]
    return dictNames
 
 #-------------------------------------------------------------------------------
@@ -374,7 +377,7 @@ def getLocalLinkDefs(rootSrcDir, outdir , dirName):
       linkDefNames += glob.glob(wildcard)
 
    # now get the ones in the inc directory
-   linkDefNames = filter (lambda name: "%sinc%s" %(os.sep,os.sep) in name, linkDefNames)
+   linkDefNames = [name for name in linkDefNames if "%sinc%s" %(os.sep,os.sep) in name]
 
    for linkDefName in linkDefNames:
       fullLinkDefName = os.path.join(outdir,linkDefName)
@@ -384,7 +387,7 @@ def getLocalLinkDefs(rootSrcDir, outdir , dirName):
 
 #-------------------------------------------------------------------------------
 def resolveSoftLinks(thePaths):
-   return map(os.path.realpath,thePaths)
+   return list(map(os.path.realpath,thePaths))
 
 #-------------------------------------------------------------------------------
 def getCppFlags(rootSrcDir,allIncPaths):
@@ -397,7 +400,7 @@ def getCppFlags(rootSrcDir,allIncPaths):
    allHeadersPartContent = ""
    filteredIncPaths = sorted(list(set(resolveSoftLinks(allIncPaths))))
    for name in resolveSoftLinks((rootSrcDir,os.getcwd())):
-      filteredIncPaths = filter (lambda incPath: not name in incPath,filteredIncPaths)
+      filteredIncPaths = [incPath for incPath in filteredIncPaths if not name in incPath]
    for incPath in filteredIncPaths:
       allHeadersPartContent += "-I%s\n" %incPath
    return allHeadersPartContent
@@ -416,7 +419,7 @@ def writeFiles(contentFileNamePairs):
 #-------------------------------------------------------------------------------
 def printModulesMessageOnScreen(selModules):
    modulesList = sorted(list(selModules))
-   print "\nGenerating PCH for %s\n" %" ".join(modulesList)
+   print("\nGenerating PCH for %s\n" %" ".join(modulesList))
 
 #-------------------------------------------------------------------------------
 def makePCHInput():
diff --git a/etc/dictpch/makepch.py b/etc/dictpch/makepch.py
index 27b715e..9ab2fef 100755
--- a/etc/dictpch/makepch.py
+++ b/etc/dictpch/makepch.py
@@ -24,7 +24,7 @@ def getArgs():
    argv = sys.argv
    argc = len(argv)
    if argc < 2:
-      print "ERROR: too few arguments specified!"
+      print("ERROR: too few arguments specified!")
    pchFileName = argv[1]
    cxxflags = ""
    if argc > 2:
@@ -39,7 +39,7 @@ def getCppFlags(cppflagsFilename):
    ifile = open(cppflagsFilename)
    lines = ifile.readlines()
    ifile.close()
-   cppFlags = " ".join(map(lambda line: line[:-1], lines))
+   cppFlags = " ".join([line[:-1] for line in lines])
    return cppFlags
 
 
@@ -64,14 +64,14 @@ def makepch():
    loc1 = os.path.join(rootdir, allheadersFilename)
    rootsys = ""
    rootSysEnvName = "ROOTSYS"
-   if os.environ.has_key(rootSysEnvName):
+   if rootSysEnvName in os.environ:
       rootsys = os.environ[rootSysEnvName]
    loc2 = os.path.join(rootsys, allheadersFilename)
 
    if not os.path.exists(loc1):
       rootdir = rootsys
       if not os.path.exists(loc2):
-         print "ERROR: cannot find %s file here %s nor here %s" %(allheadersFilename, loc1, loc2)
+         print("ERROR: cannot find %s file here %s nor here %s" %(allheadersFilename, loc1, loc2))
          sys.exit(1)
    else:
       rootbuildFlag="-rootbuild"
